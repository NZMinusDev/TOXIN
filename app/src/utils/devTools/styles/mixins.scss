@use 'sass:list';
@use 'sass:string';

@use '@utils/devTools/styles/functions.scss';

/// Places item to center using position: absolute
@mixin center-abs-position {
  position: absolute;
  top: 50%;
  left: 50%;
  text-align: center;
  transform: translate(-50%, -50%);
}
/// Makes text ellipsis
@mixin ellipsis-text {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
/// Makes text color gradient
/// @param {*} $background - css gradient
@mixin gradient-font($background) {
  background: $background;
  background-clip: text;
  color: transparent;
}

/// @font-face shortcut
/// @param { string } $family
/// @param { string } $path
/// @param {*} $font-weight [normal]
/// @param {*} $font-style [normal]
/// @link https://developer.mozilla.org/ru/docs/Learn/CSS/Styling_text/Web_fonts#font-face_%D0%B1%D0%BE%D0%BB%D0%B5%D0%B5_%D0%B4%D0%B5%D1%82%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE
@mixin import-font($family, $path, $font-weight: normal, $font-style: normal) {
  @font-face {
    $parsed-path: functions.parse-path($path);
    $file-path: list.nth($parsed-path, 1);

    font-weight: $font-weight;
    font-style: $font-style;
    font-family: $family;
    //  IE9 Compat Modes
    src: url($file-path + '.eot');
    src: local($family),
      // IE6-IE8
      url($file-path + '.eot?#iefix') format('embedded-opentype'),
      //Modern Browsers
      url($file-path + '.woff2') format('woff2'),
      url($file-path + '.woff') format('woff'),
      url($file-path + '.otf') format('opentype'),
      // Safari, Android, iOS
      url($file-path + '.ttf') format('truetype'),
      // Legacy iOS
      url($file-path + '.svg') format('svg');
  }
}

/// Adds generated in runtime smaller resolution and optimized versions of images
/// @param {*} $property - css property for images
/// @param { string string ... } $images-paths - list of images' paths
/// @param {*} $values... - additional values for $property
/// @link ./../../../../../configs/webpack.config.js
/// @todo in the future should be refactored with https://developer.mozilla.org/ru/docs/orphaned/Web/CSS/image-set()
@mixin optimized-images($property, $images-paths, $values...) {
  $urls: '';
  $urls-320: '';
  $urls-640: '';
  $urls-960: '';
  $urls-1920: '';
  $webp-urls: '';
  $webp-urls-320: '';
  $webp-urls-640: '';
  $webp-urls-960: '';
  $webp-urls-1920: '';
  $index: 0;
  @each $path in $images-paths {
    $parsed-path: functions.parse-path($path);
    $file-path: list.nth($parsed-path, 1);
    $file-ext: list.nth($parsed-path, 2);

    @if $index != 0 {
      $urls: $urls + ',';
      $urls-320: $urls-320 + ',';
      $urls-640: $urls-640 + ',';
      $urls-960: $urls-960 + ',';
      $urls-1920: $urls-1920 + ',';
      $webp-urls: $webp-urls + ',';
      $webp-urls-320: $webp-urls-320 + ',';
      $webp-urls-640: $webp-urls-640 + ',';
      $webp-urls-960: $webp-urls-960 + ',';
      $webp-urls-1920: $webp-urls-1920 + ',';
    }
    /* stylelint-disable-next-line order/order */
    $urls: $urls + url($path);
    $urls-320: $urls-320 +
      url(functions.resolve-unresolved-asset-path($path, '-320.' + $file-ext));
    $urls-640: $urls-640 +
      url(functions.resolve-unresolved-asset-path($path, '-640.' + $file-ext));
    $urls-960: $urls-960 +
      url(functions.resolve-unresolved-asset-path($path, '-960.' + $file-ext));
    $urls-1920: $urls-1920 +
      url(functions.resolve-unresolved-asset-path($path, '-1920.' + $file-ext));

    $webp-urls: $webp-urls +
      url(functions.resolve-unresolved-asset-path($path, '.webp'));
    $webp-urls-320: $webp-urls-320 +
      url(functions.resolve-unresolved-asset-path($path, '-320.webp'));
    $webp-urls-640: $webp-urls-640 +
      url(functions.resolve-unresolved-asset-path($path, '-640.webp'));
    $webp-urls-960: $webp-urls-960 +
      url(functions.resolve-unresolved-asset-path($path, '-960.webp'));
    $webp-urls-1920: $webp-urls-1920 +
      url(functions.resolve-unresolved-asset-path($path, '-1920.webp'));

    $index: $index + 1;
  }
  @supports (background-image: #{$webp-urls}) {
    @media print, screen and (min-width: 0) {
      #{$property}: #{$webp-urls-320} $values;
    }
    @media print, screen and (min-width: 600px) {
      #{$property}: #{$webp-urls-640} $values;
    }
    @media print, screen and (min-width: 960px) {
      #{$property}: #{$webp-urls-960} $values;
    }
    @media print, screen and (min-width: 1200px) {
      #{$property}: #{$webp-urls-1920} $values;
    }
  }

  @media print, screen and (min-width: 0) {
    #{$property}: #{$urls-320} $values;
  }
  @media print, screen and (min-width: 600px) {
    #{$property}: #{$urls-640} $values;
  }
  @media print, screen and (min-width: 960px) {
    #{$property}: #{$urls-960} $values;
  }
  @media print, screen and (min-width: 1200px) {
    #{$property}: #{$urls-1920} $values;
  }
}

/// Carousel with rotating images
/// @param { string string ... } $images-paths - scss list using space between img paths
@mixin background-auto-carousel($images-paths) {
  $background-images: '';
  $index: 0;
  @each $path in $images-paths {
    @if $index != 0 {
      $background-images: $background-images + ',';
    }
    /* stylelint-disable-next-line order/order */
    $index: $index + 1;
    $background-images: $background-images + url($path);
  }

  @supports (
    background-image:
      url(functions.resolve-unresolved-asset-path(
        list.nth($images-paths, 1),
        '.webp'
      ))
  ) {
    @media print, screen and (min-width: 0) {
      @include _change-image-key-frames($images-paths, 320, 'webp');
    }
    @media print, screen and (min-width: 600px) {
      @include _change-image-key-frames($images-paths, 640, 'webp');
    }
    @media print, screen and (min-width: 960px) {
      @include _change-image-key-frames($images-paths, 960, 'webp');
    }
    @media print, screen and (min-width: 1200px) {
      @include _change-image-key-frames($images-paths, 1920, 'webp');
    }
  }

  background: white no-repeat fixed;
  background-size: cover;
  animation: change-image #{list.length($images-paths) * 6s} linear infinite;

  @media print, screen and (min-width: 0) {
    @include _change-image-key-frames($images-paths, 320);
  }
  @media print, screen and (min-width: 600px) {
    @include _change-image-key-frames($images-paths, 640);
  }
  @media print, screen and (min-width: 960px) {
    @include _change-image-key-frames($images-paths, 960);
  }
  @media print, screen and (min-width: 1200px) {
    @include _change-image-key-frames($images-paths, 1920);
  }
  @include optimized-images(background-image, $images-paths);
}
@mixin _change-image-key-frames($images-paths, $size-postfix, $new-ext: '') {
  @keyframes change-image {
    $index: 0;
    @each $path in $images-paths {
      $parsed-path: functions.parse-path($path);
      $file-path: list.nth($parsed-path, 1);
      $file-ext: list.nth($parsed-path, 2);

      $keyframe: #{100 / list.length($images-paths) * $index * 1%};

      #{$keyframe} {
        @if $new-ext == '' {
          background-image: url(functions.resolve-unresolved-asset-path(
            $path,
            '-#{$size-postfix}.#{$file-ext}'
          ));
        } @else {
          background-image: url(functions.resolve-unresolved-asset-path(
            $path,
            '-#{$size-postfix}.#{$new-ext}'
          ));
        }
      }

      /* stylelint-disable-next-line order/order */
      $index: $index + 1;
    }
    100% {
      $parsed-path: functions.parse-path(list.nth($images-paths, 1));
      $file-path: list.nth($parsed-path, 1);
      $file-ext: list.nth($parsed-path, 2);

      @if $new-ext == '' {
        background-image: url(functions.resolve-unresolved-asset-path(
          list.nth($images-paths, 1),
          '-#{$size-postfix}.#{$file-ext}'
        ));
      } @else {
        background-image: url(functions.resolve-unresolved-asset-path(
          list.nth($images-paths, 1),
          '-#{$size-postfix}.#{$new-ext}'
        ));
      }
    }
  }
}
