@use 'sass:color';
@use 'sass:list';
@use 'sass:string';

/// Adjustable size depending on the user's device, if you need upper or lower border for fixed value - use this function in @media (max-width/min-width) in your project and point out the same $pc-size for default value
/// @param { number } $pc-size [10] - size in larger(your template width) state
/// @param { number } $mob-size [5] - size in smaller(page width 320px) state
/// @param { number } $template-width [1440] - width of larger template in figma or smth else
@function get-liquid-size($pc-size: 10, $mob-size: 5, $template-width: 1440) {
  $add-size: $pc-size - $mob-size;
  $max-width: $template-width - 320;
  @return calc(
    #{$mob-size + px} + #{$add-size} * ((100vw - 320px) / #{$max-width})
  );
}

/// font-family with spare fonts
/// @param { string } $plugged-font - font-family of pugged font
/// @param { serif | sans-serif | monospace } $font ['sans-serif'] - spare font
@function safe-font-family($plugged-font, $font: sans-serif) {
  $spare-font-match: (
    serif: georgia,
    sans-serif: arial,
    monospace: 'Courier New',
  );

  @return $plugged-font, map-get($map: $spare-font-match, $key: $font), $font;
}

/// Returns separated by space list with rgba values(if alpha is 1 - deletes this)
/// @param { color } $hex
@function get-rgba-values-from-hex($hex) {
  @if color.opacity($hex) == 1 {
    @return color.red($hex) color.green($hex) color.blue($hex);
  } @else {
    @return (color.red($hex) color.green($hex) color.blue($hex)) /
      color.opacity($hex);
  }
}

/// Resolve path for generated in runtime images: @assets -> ./../../assets & assign new path('.' isn't included)
/// @param { string } $path - path to img using @assets alias
/// @param { string } $new-ext - new extension of img
@function resolve-unresolved-asset-path($path, $new-ext) {
  $file-path: list.nth(parse-path($path), 1);

  $resolved-file-path: string.insert(
    string.slice($file-path, 2),
    './../../',
    0
  );

  @return $resolved-file-path + $new-ext;
}

/// Returns the last index of $sub-string in $string, or null if $string doesnâ€™t contain $sub-string
/// @param { string } $string
/// @param { string } $sub-string
@function str-last-index($string, $sub-string) {
  $index: null;
  $length: string.length($string);

  @for $n from $length through 1 {
    $index: string.index(string.slice($string, $n, $length), $sub-string);
    @if $index {
      @return $index + $n - 1;
    }
  }

  @return $index;
}

/// Returns list with path and extension
/// @param { string } $path - path to file
@function parse-path($path) {
  $path-extension-index: str-last-index($path, '.');
  $file-path: string.slice($path, 0, $path-extension-index - 1);
  $file-ext: string.slice($path, $path-extension-index + 1);

  @return ($file-path, $file-ext);
}
