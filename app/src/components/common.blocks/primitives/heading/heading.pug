//-
  heading: { [tag: string]: text }, example: { h3: 'awesome heading' }
  display?: 'block' | 'inline-block'
  textTransform?: 'none'
  fontSize?: 'inherit'
  lineHeight?: 'inherit' - height of line
  theFirstLetterSize?: 'extra-small'(0.583em) | 'small'(0.737)em - size of the first letter(caution: display will be changed to `inline-block` cause of `::first-letter` behavior - see https://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter)
  color?: 'inherit' - color of text
  justifyContent?: 'center' - horizontal alignment
  description?: string - description text
  isLabel?: boolean - if true, add nested label tag and take a block of pug
    labelJustifyContent?: 'spread'(space-between) - justify-content of label inside heading
  Tip: mixin also uses 'and attributes'(&attributes)
mixin heading(heading, { display = '', textTransform = '', fontSize = '', lineHeight = '', theFirstLetterSize = '', color = '', justifyContent = '', description = '', isLabel = false, labelJustifyContent = undefined } = {})
  -
    const headingTag = Object.keys(heading)[0];
    const headingTagClass = `heading_tag_the-${headingTag}`;
    const displayClass = display && `heading_display_${display}`;
    const textTransformClass = textTransform && `heading_text-transform_${textTransform}`;
    const fontSizeClass = fontSize && `heading_font-size_${fontSize}`;
    const lineHeightClass = lineHeight && `heading_line-height_${lineHeight}`;
    const theFirstLetterSizeClass = theFirstLetterSize && `heading_the-first-letter-size_${theFirstLetterSize}`;
    const colorClass = color && `heading_color_${color}`;
    const justifyContentClass = justifyContent && `heading_justify-content_${justifyContent}`;
    const interactiveLabelClass = attributes.for && `heading__label_interactive`;
    const labelJustifyContentClass = labelJustifyContent &&`heading__label_justify-content_${labelJustifyContent}`;
  if isLabel
    #{headingTag}.heading(
      class=[headingTagClass, displayClass, textTransformClass, fontSizeClass, lineHeightClass, theFirstLetterSizeClass, colorClass, justifyContentClass]
    )
      label.heading__label(class=[interactiveLabelClass, labelJustifyContentClass])&attributes(attributes)= heading[headingTag]
        block
      if description
        label.heading__description= description
  else
    #{headingTag}.heading(
      class=[headingTagClass, displayClass, textTransformClass, fontSizeClass, lineHeightClass, theFirstLetterSizeClass, colorClass, justifyContentClass]
    )= heading[headingTag]
      block
