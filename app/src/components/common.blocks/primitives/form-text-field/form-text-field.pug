include ~@common.blocks/primitives/heading/heading.pug
include ~@common.blocks/primitives/icon/icon.pug

//-
  heading?: see mixin heading
  description?: see mixin heading
  name?: string - name of input field
  type?: 'text' | 'email' | 'password' | 'date' - type of field for validation 
  placeholder?: string - placeholder text
  value?: string - init value of field
  autofocus?: boolean - autofocus of field
  materialIcon?: string - material icon name for submit btn in field
  isFilter?: boolean - if true, input change event will reload page with chosen value(get method)
  Tip: mixin also uses 'and attributes'(&attributes)
mixin form-text-field({ heading = undefined, description = '', name = 'text-field', type = 'text', placeholder = '', value = '', autofocus = false, materialIcon = '', isFilter = false } = {})
  -
    //- allowed inputmode:  'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url',
    //- allowed types for placeholder attribute: 'email', 'number', 'password', 'search', 'tel', 'text', 'url'

    const attributesOfType = htmlWebpackPlugin ? require('@common.blocks/primitives/form-text-field/attributes-of-type.json') : { text:{}, email:{}, password:{}, date:{} };
    const { inputType, inputmode, placeholderOfType, withPlaceholder } = attributesOfType[type];

    const typeClass = `form-text-field__input_type_with-${type}`;
  .form-text-field.js-form-text-field&attributes(attributes)
    if heading
      .form-text-field__heading
        +heading(heading, { description, isLabel: true })(for=name)
    .form-text-field__field
      -
        const placeholderText = placeholder || placeholderOfType;
      input.form-text-field__input.js-form-text-field__input(
        class=[typeClass],
        data-is-filter=isFilter,
        type=inputType,
        inputmode=inputmode,
        name=name,
        id=name,
        placeholder=withPlaceholder && placeholderText,
        value=value,
        autofocus=autofocus
      )
      if materialIcon
        +icon({ tag: 'button', content: materialIcon, width: 'large', color: 'primary-gradient' })(
          type="submit"
        )
