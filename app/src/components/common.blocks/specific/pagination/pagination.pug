//- displayed: {number} - amount of items to display 
//- total: {number} - amount of searched items
//- type?: 'href' | 'async'
  //- Additional for type='href':
    //-  hrefPrefix: {string} - href with: location, filter get settings, name of pagination. Example: /catalog?date1=date&guests=3&page=
//- page?: {number} - active page
//- text?: {string} - placed text after amounts
mixin pagination({ total = 100, displayed = 12, page = 1, text = '', type = 'href', hrefPrefix = '?page=',} = {})
  -
    const pages = Math.ceil(total / displayed);
    const activePage = page;

    // Determine how many pages to show after the current page index
    let pageCutLow = activePage - 1;

    // Determine how many pages to show before the current page index
    let pageCutHigh = activePage + 1;

    if (activePage === 1) {
      pageCutLow += 1;
      pageCutHigh += 1;
    }

    if (activePage >= pages) {
      pageCutLow -= 1;
      pageCutHigh = pages;
    }

    const counterFrom = (activePage - 1) * displayed + 1;
    const counterTo =
      activePage * displayed > total
        ? total
        : activePage * displayed;
    const counterToString = `${counterTo}`;
    const counterTotalString = `${total}`;
    const counterTotal =
      counterTotalString.length > counterToString.length
        ? `${
            Math.floor(total / Math.pow(10, counterToString.length)) *
            Math.pow(10, counterToString.length)
          }+ `
        : `${total} `;

    const counterText = `${counterFrom} - ${counterTo} из ${counterTotal}${text}`;

    let paginationHrefs;
    if (type === 'href') {
      paginationHrefs = new Array(pages)
        .fill('')
        .map((value, index) => `${hrefPrefix}${index}`);
    }
  nav.pagination(
    class=type === 'async' ? 'pagination_mod-async' : null,
    data-page=type === 'async' ? activePage : null,
    data-displayed=type === 'async' ? displayed : null,
    data-total=type === 'async' ? total : null,
    data-text=type === 'async' ? text : null
  )&attributes(attributes)
    ul.pagination__list
      //- Show the Previous button only if you are on a page other than the first
      if activePage > 1
        li.pagination__item.pagination__item_previous(title="на предыдущую страницу")
          a(href=type === 'href' ? paginationHrefs[activePage - 2] : null)= 'arrow_back'
      //- Show all the pagination elements if there are less than 6 pages total
      if pages < 6
        - for (let p = 1; p <= pages; p++)
        li.pagination__item(
          class=activePage === p ? 'pagination__item_active' : null,
          title="текущая страница"
        )
          a(href=type === 'href' ? paginationHrefs[p - 1] : null)= p
      //- Use "..." to collapse pages outside of a certain range
      else
        //- Show the very first page followed by a "..." at the beginning of the pagination section (after the Previous button)
        if activePage > 2
          li.pagination__item
            a(href=type === 'href' ? paginationHrefs[0] : null)= 1
          if activePage > 3
            li.pagination__item.pagination__item_out-of-range
              a(href=type === 'href' ? paginationHrefs[1] : null)= '...'
        //- Output the indexes for pages that fall inside the range of pageCutLow and pageCutHigh
        - for (let p = pageCutLow; p <= pageCutHigh; p++)
          li.pagination__item(
            class=activePage === p ? 'pagination__item_active' : null,
            title="текущая страница"
          )
            a(href=type === 'href' ? paginationHrefs[p - 1] : null)= p
        //- Show the very last page preceded by a "..." at the end of the pagination section (before the Next button)
        if activePage < pages - 1
          if activePage < pages - 2
            li.pagination__item.pagination__item_out-of-range
              a(href=type === 'href' ? paginationHrefs[pages - 3] : null)= '...'
          li.pagination__item
            a(href=type === 'href' ? paginationHrefs[pages - 1] : null)= pages
      //- Show the Next button only if you are on a page other than the last
      if activePage < pages
        li.pagination__item.pagination__item_next(title="на следующую страницу")
          a(href=type === 'href' ? paginationHrefs[activePage] : null)= 'arrow_forward'
    //- counter
    p.pagination__counter= counterText
